{"createdAt":"2025-10-03T18:45:37.007Z","updatedAt":"2025-10-06T14:40:42.551Z","id":"8JJLXcr1qElbI8Yy","name":"Finamob - 6.2 - SDR Diogo IA - Calendar","active":false,"isArchived":false,"nodes":[{"parameters":{"content":"## Preparacao de valores","height":1232,"width":816,"color":7},"type":"n8n-nodes-base.stickyNote","position":[-272,64],"typeVersion":1,"id":"c947fbe0-7995-4eae-b611-8cd0f6f6e829","name":"Sticky Note"},{"parameters":{"mode":"raw","jsonOutput":"{\n  \"timezone\": \"America/Sao_Paulo\",\n  \"timeBetweenMeetingsMinutes\": 30,\n  \"schedule\": [\n    {\n      \"day\": \"SEG\",\n      \"available\": true,\n      \"hours\": [\n        { \"after\": \"10:00\", \"before\": \"12:00\" },\n        { \"after\": \"14:00\", \"before\": \"18:00\" }\n      ]\n    },\n    {\n      \"day\": \"TER\",\n      \"available\": true,\n      \"hours\": [\n        { \"after\": \"10:00\", \"before\": \"12:00\" },\n        { \"after\": \"14:00\", \"before\": \"18:00\" }\n      ]\n    },\n    {\n      \"day\": \"QUA\",\n      \"available\": true,\n      \"hours\": [\n        { \"after\": \"10:00\", \"before\": \"12:00\" },\n        { \"after\": \"14:00\", \"before\": \"18:00\" }\n      ]\n    },\n    {\n      \"day\": \"QUI\",\n      \"available\": true,\n      \"hours\": [\n        { \"after\": \"10:00\", \"before\": \"12:00\" },\n        { \"after\": \"14:00\", \"before\": \"18:00\" }\n      ]\n    },\n    {\n      \"day\": \"SEX\",\n      \"available\": true,\n      \"hours\": [\n        { \"after\": \"10:00\", \"before\": \"12:00\" },\n        { \"after\": \"14:00\", \"before\": \"18:00\" }\n      ]\n    },\n    {\n      \"day\": \"SAB\",\n      \"available\": false,\n      \"hours\": []\n    },\n    {\n      \"day\": \"DOM\",\n      \"available\": false,\n      \"hours\": []\n    }\n  ]\n}\n","options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[48,640],"id":"7dde7cd6-08d6-4f51-99a6-29e1747becb5","name":"Definir Agenda"},{"parameters":{"inputSource":"jsonExample","jsonExample":"{\n\"type\": \"listarHorarios\",\n\"tema\": \"funding imobiliario\",\n\"dia\": \"2025-09-10\",\n\"horario\": \"2025-09-10\",\n\"email\": \"usuario@email.com\",\n\"telefone\": \"5511999999999\",\n\"nome\": \"JoÃ£o da Silva\",\n\"empresa\": \"Empresa X\"\n}"},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-192,640],"id":"454a042e-d3ad-47d9-8af6-119b1e3cbec9","name":"trigger"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('trigger').item.json.type }}","rightValue":"listarHorarios","operator":{"type":"string","operation":"equals"},"id":"2d821077-bb35-4636-ac10-7ad6c459876b"}],"combinator":"and"},"renameOutput":true,"outputKey":"listarHorarios"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2c971151-b71a-4f4e-9e2a-222c8047ce1a","leftValue":"={{ $('trigger').item.json.type }}","rightValue":"agendarReuniao","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"agendarReuniao"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"c547c9e1-f130-4390-9088-65fd9282edfc","leftValue":"={{ $('trigger').item.json.type }}","rightValue":"encontrarReuniao","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"encontrarReuniao"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"de18d8e3-b6df-4754-940b-2b534d4e4ce1","leftValue":"={{ $('trigger').item.json.type }}","rightValue":"mudarReuniao","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"mudarReuniao"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"4260bfd0-cf2f-4f30-a395-69e4e4bc95be","leftValue":"={{ $('trigger').item.json.type }}","rightValue":"cancelarReuniao","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"cancelarReuniao"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[240,592],"id":"7b9ce2d2-50ec-48f1-975c-d50badf03b8f","name":"Switch2"},{"parameters":{"content":"## Mudar Evento","height":384,"width":1600,"color":2},"type":"n8n-nodes-base.stickyNote","position":[608,912],"typeVersion":1,"id":"b2dbaeae-4784-4530-a385-56425251e7c3","name":"Sticky Note8"},{"parameters":{"operation":"getAll","calendar":{"__rl":true,"value":"nicolas.pereira022022@gmail.com","mode":"list","cachedResultName":"nicolas.pereira022022@gmail.com"},"returnAll":true,"timeMax":"={{ $now.plus({ week: 2 }) }}","options":{}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[672,1056],"id":"aaa2bc51-e490-440c-8908-b3dbae89a72d","name":"Listar Eventos4","credentials":{"googleCalendarOAuth2Api":{"id":"iXoqyD421T6fmy1X","name":"Google Calendar account"}}},{"parameters":{"jsCode":"// --- Email vindo do node \"trigger\" (flat) ou do prÃ³prio item atual como fallback\nconst emailTrigger = String(\n  $node[\"trigger\"]?.json?.email ?? $json?.email ?? \"\"\n).trim().toLowerCase();\n\nif (!emailTrigger) {\n  return [{ json: { error: \"email ausente no trigger\" } }];\n}\n\n// --- Todos os items que chegam neste Code (devem ser os eventos)\nconst items = await $input.all();\n\n// --- MantÃ©m sÃ³ eventos onde attendees contÃ©m o e-mail do trigger\nconst filtrados = items.filter(it => {\n  const attendees = it.json?.attendees;\n  return Array.isArray(attendees) &&\n    attendees.some(a => String(a.email || \"\").trim().toLowerCase() === emailTrigger);\n});\n\n// --- SaÃ­da\nreturn filtrados;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[880,1056],"id":"17ef758b-a325-42d7-87e2-1cf887adc7b2","name":"Filtrar Eventos"},{"parameters":{"jsCode":"// Entram aqui os eventos jÃ¡ filtrados (cada item = 1 evento)\nconst items = await $input.all();\n\nif (!items.length) {\n  return [{ json: { mensagem: \"NÃ£o encontrei eventos para esse e-mail.\", eventos: [] } }];\n}\n\nconst TZ = \"America/Sao_Paulo\";\n\n// helpers\nconst toDate = (d) => d ? new Date(d) : null;\nconst sameYmd = (a, b) => a.toLocaleString(\"sv-SE\", { timeZone: TZ }).slice(0,10) === b.toLocaleString(\"sv-SE\", { timeZone: TZ }).slice(0,10);\n\n// hoje (SP)\nconst agora = new Date();\nconst hojeSP = new Date(new Date().toLocaleString(\"en-US\", { timeZone: TZ }));\n\n// normaliza -> filtra invÃ¡lidos -> filtra futuros e nÃ£o-hoje -> ordena\nconst normalizados = items\n  .map((it) => it.json)\n  .map((ev) => {\n    const start = toDate(ev.start?.dateTime || ev.start);\n    const end   = toDate(ev.end?.dateTime   || ev.end);\n    return { ev, start, end, tz: ev.start?.timeZone || TZ };\n  })\n  .filter(x => x.ev?.id && x.start instanceof Date && !isNaN(x.start))\n  .filter(x => x.start > agora && !sameYmd(x.start, hojeSP))\n  .sort((a, b) => a.start - b.start);\n\nif (!normalizados.length) {\n  return [{ json: { mensagem: \"NÃ£o hÃ¡ eventos futuros (exceto hoje).\", eventos: [] } }];\n}\n\nfunction fmtLinha(x, i) {\n  const ev = x.ev;\n  const tz = x.tz;\n  const s = x.start;\n  const e = x.end instanceof Date && !isNaN(x.end) ? x.end : null;\n\n  const dia   = s.toLocaleDateString(\"pt-BR\", { timeZone: tz });\n  const hIni  = s.toLocaleTimeString(\"pt-BR\", { timeZone: tz, hour: \"2-digit\", minute: \"2-digit\" });\n  const hFim  = e ? e.toLocaleTimeString(\"pt-BR\", { timeZone: tz, hour: \"2-digit\", minute: \"2-digit\" }) : null;\n\n  return {\n    numero: i + 1,\n    id: ev.id,\n    assunto: ev.summary || \"Sem tÃ­tulo\",\n    dia,\n    horaInicio: hIni,\n    horaFim: hFim,\n    timezone: tz,\n    link: ev.htmlLink || ev.hangoutLink || null,\n  };\n}\n\nconst essenciais = normalizados.map(fmtLinha);\n\n// monta mensagem (limita a 10 linhas para nÃ£o estourar UI)\nconst linhasMsg = essenciais.slice(0, 10).map(e =>\n  `${e.numero} - ${e.assunto}, ${e.dia}, ${e.horaInicio}${e.horaFim ? \"-\" + e.horaFim : \"\"}, id ${e.id}`\n);\n\nconst mensagem =\n  `Temos os seguintes eventos nesse e-mail:\\n\\n` +\n  linhasMsg.join(\"\\n\") +\n  `\\n\\nMe informe o nÃºmero do evento que vocÃª deseja alterar ou cancelar.`;\n\nreturn [{\n  json: {\n    mensagem,\n    eventos: essenciais,\n    numeroParaId: Object.fromEntries(essenciais.map(e => [String(e.numero), e.id]))\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1088,1056],"id":"5e1dfd31-7e21-42e9-8388-284a4621617a","name":"Response"},{"parameters":{"operation":"update","calendar":{"__rl":true,"mode":"list","value":""},"updateFields":{}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[672,1488],"id":"f10cd2bf-773e-44c4-9485-861db6be5abd","name":"Update an event","credentials":{"googleCalendarOAuth2Api":{"id":"iXoqyD421T6fmy1X","name":"Google Calendar account"}},"disabled":true},{"parameters":{"content":"## Reagendar Consulta","height":352,"width":1600,"color":2},"type":"n8n-nodes-base.stickyNote","position":[608,1344],"typeVersion":1,"id":"e95a4ae6-77cb-4f0e-aea6-bea88062cb97","name":"Sticky Note7"},{"parameters":{"content":"## Cancelar Consulta","height":352,"width":1600,"color":3},"type":"n8n-nodes-base.stickyNote","position":[608,1728],"typeVersion":1,"id":"62660d95-86b0-4eae-b3b1-ce612229fbe5","name":"Sticky Note6"},{"parameters":{"assignments":{"assignments":[{"id":"383df707-d58b-4770-a5d8-aa14b37d6d3d","name":"response","value":"Como vocÃª sabe, sou a Emi, uma agente de IA ðŸ˜Š. Ainda nÃ£o me treinaram para reagendar ou cancelar reuniÃµes por aqui. Pode fazer direto no Google Calendar ou falar com o especialista por e-mail â€” vocÃª consegue sugerir as mudanÃ§as por lÃ¡. Tenho certeza de que logo, logo chega o meu treinamento pra eu fazer isso por vocÃª por aqui!  Quer que eu te ajude com mais alguma coisa agora?","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1296,1056],"id":"1687beee-3fe0-4102-ae74-19417379f5c0","name":"response2"},{"parameters":{"resource":"messages-api","instanceName":"social-media-finamob-oficial","remoteJid":"5511992486507","messageText":"Evento criado","options_message":{}},"type":"n8n-nodes-evolution-api.evolutionApi","typeVersion":1,"position":[1904,704],"id":"d122f5d2-bf34-44e8-bc30-bfe1b16ba1a5","name":"Enviar texto","credentials":{"evolutionApi":{"id":"4JfTThlwBUF4KuNE","name":"Evolution - social-media-finamob-oficial"}}},{"parameters":{"content":"## Buscar Horarios","height":352,"width":1600,"color":5},"type":"n8n-nodes-base.stickyNote","position":[608,64],"typeVersion":1,"id":"ce0e4141-1199-4045-adcd-7e1b86b930df","name":"Sticky Note9"},{"parameters":{"content":"## Marcar Consulta","height":432,"width":1600,"color":4},"type":"n8n-nodes-base.stickyNote","position":[608,448],"typeVersion":1,"id":"2d11cd0a-a3f8-42f1-b62d-61964d5a6f50","name":"Sticky Note10"},{"parameters":{"calendar":{"__rl":true,"value":"nicolas.pereira022022@gmail.com","mode":"list","cachedResultName":"nicolas.pereira022022@gmail.com"},"start":"={{ $json.dados.inicio.dateTime }}","end":"={{ $json.dados.fim.dateTime }}","additionalFields":{"attendees":["={{ $json.dados.email }}"],"description":"=whatsapp  {{ $json.dados.nome }}: {{ $json.dados.telefone }}","summary":"=ReuniÃ£o Finamob com {{ $json.dados.nome }} - {{ $json.dados.empresa }}"}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[1648,704],"id":"0a9fb9b9-dc12-49a6-a542-40e1198a6c81","name":"agendar consulta","credentials":{"googleCalendarOAuth2Api":{"id":"iXoqyD421T6fmy1X","name":"Google Calendar account"}}},{"parameters":{"jsCode":"// === Pega a agenda (objeto Ãºnico) ===\nconst agenda = $node[\"Definir Agenda\"].json;\n\n// === Pega todos os eventos (array de items) ===\nconst eventosRaw = $items(\"Listar Eventos2\").map(item => item.json);\n\n// Normaliza eventos garantindo timezone coerente\nconst eventos = eventosRaw.map(ev => ({\n  start: new Date(ev.start.dateTime),\n  end: new Date(ev.end.dateTime),\n}));\n\nconst intervaloMin = agenda.timeBetweenMeetingsMinutes;\nconst diasSemana = { DOM: 0, SEG: 1, TER: 2, QUA: 3, QUI: 4, SEX: 5, SAB: 6 };\n\n// TZ e string do dia corrente (YYYY-MM-DD) no fuso da agenda\nconst tz = agenda.timezone || \"America/Sao_Paulo\";\nconst hojeStr = new Date().toLocaleString(\"sv-SE\", { timeZone: tz }).slice(0,10);\n\n// FunÃ§Ã£o auxiliar: prÃ³xima data para um dia da semana (pode retornar hoje)\nfunction getProximaData(dia) {\n  const hoje = new Date();\n  let data = new Date(hoje);\n  while (data.getDay() !== diasSemana[dia]) {\n    data.setDate(data.getDate() + 1);\n  }\n  return data;\n}\n\n// === GeraÃ§Ã£o dos slots disponÃ­veis ===\nlet slotsLivres = [];\n\nfor (const dia of agenda.schedule) {\n  if (!dia.available) continue;\n\n  const dataAlvo = getProximaData(dia.day);\n\n  // Garante que hours seja sempre array\n  const faixas = Array.isArray(dia.hours) ? dia.hours : [dia.hours];\n\n  for (const faixa of faixas) {\n    const [hIni, mIni] = faixa.after.split(\":\").map(Number);\n    const [hFim, mFim] = faixa.before.split(\":\").map(Number);\n\n    const inicioDia = new Date(dataAlvo);\n    inicioDia.setHours(hIni, mIni, 0, 0);\n\n    const fimDia = new Date(dataAlvo);\n    fimDia.setHours(hFim, mFim, 0, 0);\n\n    let current = new Date(inicioDia);\n\n    while (current < fimDia) {\n      const next = new Date(current.getTime() + intervaloMin * 60000);\n      if (next > fimDia) break;\n\n      // Exclui qualquer slot do dia corrente (no fuso da agenda)\n      const currentDiaStr = current.toLocaleString(\"sv-SE\", { timeZone: tz }).slice(0,10);\n      if (currentDiaStr === hojeStr) { current = next; continue; }\n\n      // Checa conflito com eventos\n      const ocupado = eventos.some(ev => current < ev.end && next > ev.start);\n\n      if (!ocupado) {\n        slotsLivres.push({\n          day: dia.day,\n          start: current.toLocaleString(\"sv-SE\", { timeZone: tz }).replace(\" \", \"T\") + \":00.000Z\",\n          end:   next.toLocaleString(\"sv-SE\",   { timeZone: tz }).replace(\" \", \"T\") + \":00.000Z\",\n        });\n      }\n\n      current = next;\n    }\n  }\n}\n\nreturn slotsLivres;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[880,208],"id":"9617a4c9-b008-466e-a49b-d5eabae77c56","name":"Slots Disponiveis2"},{"parameters":{"operation":"getAll","calendar":{"__rl":true,"value":"nicolas.pereira022022@gmail.com","mode":"list","cachedResultName":"nicolas.pereira022022@gmail.com"},"returnAll":true,"timeMax":"={{ $now.plus({ week: 2 }) }}","options":{}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[672,208],"id":"0acde3fc-344e-419c-a385-dd1eef944542","name":"Listar Eventos2","credentials":{"googleCalendarOAuth2Api":{"id":"iXoqyD421T6fmy1X","name":"Google Calendar account"}}},{"parameters":{"jsCode":"// === Pega a agenda (objeto Ãºnico) ===\nconst agenda = $node[\"Definir Agenda\"].json;\n\n// === Pega todos os eventos (array de items) ===\nconst eventosRaw = $items(\"Listar Eventos3\").map(item => item.json);\n\n// Normaliza eventos garantindo timezone coerente\nconst eventos = eventosRaw.map(ev => ({\n  start: new Date(ev.start.dateTime),\n  end: new Date(ev.end.dateTime),\n}));\n\nconst intervaloMin = agenda.timeBetweenMeetingsMinutes;\nconst diasSemana = { DOM: 0, SEG: 1, TER: 2, QUA: 3, QUI: 4, SEX: 5, SAB: 6 };\n\n// TZ e string do dia corrente (YYYY-MM-DD) no fuso da agenda\nconst tz = agenda.timezone || \"America/Sao_Paulo\";\nconst hojeStr = new Date().toLocaleString(\"sv-SE\", { timeZone: tz }).slice(0,10);\n\n// FunÃ§Ã£o auxiliar: prÃ³xima data para um dia da semana (pode retornar hoje)\nfunction getProximaData(dia) {\n  const hoje = new Date();\n  let data = new Date(hoje);\n  while (data.getDay() !== diasSemana[dia]) {\n    data.setDate(data.getDate() + 1);\n  }\n  return data;\n}\n\n// === GeraÃ§Ã£o dos slots disponÃ­veis ===\nlet slotsLivres = [];\n\nfor (const dia of agenda.schedule) {\n  if (!dia.available) continue;\n\n  const dataAlvo = getProximaData(dia.day);\n\n  // Garante que hours seja sempre array\n  const faixas = Array.isArray(dia.hours) ? dia.hours : [dia.hours];\n\n  for (const faixa of faixas) {\n    const [hIni, mIni] = faixa.after.split(\":\").map(Number);\n    const [hFim, mFim] = faixa.before.split(\":\").map(Number);\n\n    const inicioDia = new Date(dataAlvo);\n    inicioDia.setHours(hIni, mIni, 0, 0);\n\n    const fimDia = new Date(dataAlvo);\n    fimDia.setHours(hFim, mFim, 0, 0);\n\n    let current = new Date(inicioDia);\n\n    while (current < fimDia) {\n      const next = new Date(current.getTime() + intervaloMin * 60000);\n      if (next > fimDia) break;\n\n      // Exclui qualquer slot do dia corrente (no fuso da agenda)\n      const currentDiaStr = current.toLocaleString(\"sv-SE\", { timeZone: tz }).slice(0,10);\n      if (currentDiaStr === hojeStr) { current = next; continue; }\n\n      // Checa conflito com eventos\n      const ocupado = eventos.some(ev => current < ev.end && next > ev.start);\n\n      if (!ocupado) {\n        slotsLivres.push({\n          day: dia.day,\n          start: current.toLocaleString(\"sv-SE\", { timeZone: tz }).replace(\" \", \"T\") + \":00.000Z\",\n          end:   next.toLocaleString(\"sv-SE\",   { timeZone: tz }).replace(\" \", \"T\") + \":00.000Z\",\n        });\n      }\n\n      current = next;\n    }\n  }\n}\n\nreturn slotsLivres;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[880,608],"id":"42a53703-9bcc-4080-bc8d-4a0cd3b73cde","name":"Slots Disponiveis3"},{"parameters":{"operation":"getAll","calendar":{"__rl":true,"value":"nicolas.pereira022022@gmail.com","mode":"list","cachedResultName":"nicolas.pereira022022@gmail.com"},"returnAll":true,"timeMax":"={{ $now.plus({ week: 2 }) }}","options":{}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[672,608],"id":"a4a61731-6c87-4b53-8ca7-7f28bfe64bb6","name":"Listar Eventos3","credentials":{"googleCalendarOAuth2Api":{"id":"iXoqyD421T6fmy1X","name":"Google Calendar account"}}},{"parameters":{"jsCode":"// === Pega o 1Âº item do trigger (se o Code estiver em \"Run Once for All Items\")\nconst input = $items(\"trigger\")[0].json;\n// Se seu Code estiver em \"Run Once for Each Item\", use:\n// const input = $json;\n\nconst { dia, horario, nome, empresa, email, telefone } = input;\n\n// === TZ e \"hoje\" no fuso de SP ===\nconst tz = \"America/Sao_Paulo\";\nconst hojeStr = new Date().toLocaleString(\"sv-SE\", { timeZone: tz }).slice(0, 10); // YYYY-MM-DD\n\n// === Pega a lista de slots disponÃ­veis (array de items) e remove os de hoje ===\n// Os slots jÃ¡ vÃªm como \"YYYY-MM-DDTHH:MM:SS\" (sem timezone). Use comparaÃ§Ã£o por string.\nconst slots = $items(\"Slots Disponiveis3\")\n  .map(item => item.json)\n  .filter(slot => {\n    const slotDia = String(slot.start).slice(0, 10); // YYYY-MM-DD\n    return slotDia > hojeStr; // exclui o dia corrente\n  });\n\n// Normaliza slot solicitado (yyyy-mm-ddTHH:MM)\nconst solicitadoKey = `${dia}T${horario}`;\n\n// Procura se o slot solicitado estÃ¡ na lista\nconst encontrado = slots.find(slot => {\n  const sKey = String(slot.start).substring(0, 16); // yyyy-mm-ddTHH:MM\n  return sKey === solicitadoKey;\n});\n\n// Garante formato \"YYYY-MM-DDTHH:MM:SS\" (sem timezone)\nfunction toYYYYMMDDTHHMMSS(s) {\n  return String(s).substring(0, 19);\n}\n\nif (encontrado) {\n  return [{\n    json: {\n      status: \"ok\",\n      message: `HorÃ¡rio disponÃ­vel: ${dia} ${horario}. Pode agendar.`,\n      dados: {\n        nome,\n        empresa,\n        email,\n        telefone,\n        inicio: { dateTime: toYYYYMMDDTHHMMSS(encontrado.start), timeZone: tz },\n        fim:    { dateTime: toYYYYMMDDTHHMMSS(encontrado.end),   timeZone: tz }\n      }\n    }\n  }];\n} else {\n  // Agrupa slots por dia\n  const slotsPorDia = {};\n  for (const slot of slots) {\n    const d = String(slot.start).split(\"T\")[0];\n    (slotsPorDia[d] ||= []).push(slot);\n  }\n  // Ordena slots por horÃ¡rio dentro de cada dia\n  for (const d in slotsPorDia) {\n    slotsPorDia[d].sort((a, b) => new Date(a.start) - new Date(b.start));\n  }\n\n  // Descobre os dias alvo: anterior, mesmo, seguinte\n  const solicitadoDia = dia;\n  const diaAnterior = new Date(`${dia}T00:00:00`);\n  diaAnterior.setDate(diaAnterior.getDate() - 1);\n  const diaSeguinte = new Date(`${dia}T00:00:00`);\n  diaSeguinte.setDate(diaSeguinte.getDate() + 1);\n\n  const prev = diaAnterior.toISOString().split(\"T\")[0];\n  const next = diaSeguinte.toISOString().split(\"T\")[0];\n\n  // Pega no mÃ­nimo 2 e no mÃ¡ximo 6 alternativas\n  let alternativas = [\n    ...(slotsPorDia[prev]?.slice(0, 2) || []),\n    ...(slotsPorDia[solicitadoDia]?.slice(0, 2) || []),\n    ...(slotsPorDia[next]?.slice(0, 2) || []),\n  ];\n\n  // Se ainda nÃ£o tiver 2, expande atÃ© 7 dias\n  let offset = 2;\n  while (alternativas.length < 2 && offset <= 7) {\n    const before = new Date(`${dia}T00:00:00`); before.setDate(before.getDate() - offset);\n    const after  = new Date(`${dia}T00:00:00`); after.setDate(after.getDate() + offset);\n    alternativas = [\n      ...alternativas,\n      ...(slotsPorDia[before.toISOString().split(\"T\")[0]]?.slice(0, 2) || []),\n      ...(slotsPorDia[after.toISOString().split(\"T\")[0]]?.slice(0, 2) || []),\n    ];\n    offset++;\n  }\n\n  alternativas = alternativas.slice(0, 6).map(slot => ({\n    inicio: { dateTime: toYYYYMMDDTHHMMSS(slot.start), timeZone: tz },\n    fim:    { dateTime: toYYYYMMDDTHHMMSS(slot.end),   timeZone: tz }\n  }));\n\n  return [{\n    json: {\n      status: \"indisponivel\",\n      message: `O horÃ¡rio ${dia} ${horario} nÃ£o estÃ¡ disponÃ­vel.`,\n      alternativas\n    }\n  }];\n}\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1120,608],"id":"1076f2cb-5c62-470b-8dcb-2fe11f10a1b2","name":"Code1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"597f2e89-0383-4155-ab3b-1a26a5037fc0","leftValue":"={{ $json.status }}","rightValue":"indisponivel","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1344,608],"id":"999a8284-79c1-46ea-a55b-49b4f836cae5","name":"If"},{"parameters":{"assignments":{"assignments":[{"id":"ad1726fe-95a3-42ab-8b6c-836f7b37668e","name":"status","value":"={{ $json.message }}","type":"string"},{"id":"50e62759-8242-4df9-b4f7-b3891e645ff8","name":"alternativas","value":"={{ $json.alternativas }}","type":"array"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1648,480],"id":"27dab06c-8e84-45de-afa1-6dc8498700b1","name":"response1"}],"connections":{"Definir Agenda":{"main":[[{"node":"Switch2","type":"main","index":0}]]},"trigger":{"main":[[{"node":"Definir Agenda","type":"main","index":0}]]},"Switch2":{"main":[[{"node":"Listar Eventos2","type":"main","index":0}],[{"node":"Listar Eventos3","type":"main","index":0}],[{"node":"Listar Eventos4","type":"main","index":0}],[],[]]},"Listar Eventos4":{"main":[[{"node":"Filtrar Eventos","type":"main","index":0}]]},"Filtrar Eventos":{"main":[[{"node":"Response","type":"main","index":0}]]},"Response":{"main":[[{"node":"response2","type":"main","index":0}]]},"Listar Eventos2":{"main":[[{"node":"Slots Disponiveis2","type":"main","index":0}]]},"Slots Disponiveis3":{"main":[[{"node":"Code1","type":"main","index":0}]]},"Listar Eventos3":{"main":[[{"node":"Slots Disponiveis3","type":"main","index":0}]]},"Code1":{"main":[[{"node":"If","type":"main","index":0}]]},"If":{"main":[[{"node":"response1","type":"main","index":0}],[{"node":"agendar consulta","type":"main","index":0}]]},"agendar consulta":{"main":[[]]}},"settings":{"executionOrder":"v1","callerPolicy":"workflowsFromSameOwner","errorWorkflow":"Cem9y3zmcggUQhrp"},"staticData":{"node:Stripe Trigger":{"webhookId":"we_1S45HZRuKlw6o0Hg4nRNx3O2","webhookEvents":["customer.subscription.created"],"webhookSecret":"whsec_u9SDEbFzkZY1tJcmw28bdoOkPw1RIb4p"}},"meta":{"templateCredsSetupCompleted":true},"pinData":{"trigger":[{"json":{"type":"agendarReuniao","tema":"imersÃµes/club","dia":"2025-09-10","horario":"17:00","email":"lucas95_souza@hotmail.com","telefone":"11992486507","nome":"Lucas Andrade","empresa":"MDS"}}]},"versionId":"b2bd4f2e-78fb-4e9a-9ecf-648a42d8fe18","triggerCount":1,"tags":[]}