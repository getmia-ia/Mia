{"createdAt":"2025-10-20T17:54:27.771Z","updatedAt":"2025-10-22T16:35:33.311Z","id":"UGLJK1sJJsaorHbU","name":"BMS - 9.2- Erro Defesas Admin","active":false,"isArchived":true,"nodes":[{"parameters":{"content":"","height":460,"width":1020,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[144,64],"id":"ceea80da-a02d-43c8-94d0-51063fa7c46d","name":"Sticky Note"},{"parameters":{"method":"POST","url":"https://xqyxalqwsxqndjetgzry.supabase.co/functions/v1/webhook-n8n-defesas","authentication":"predefinedCredentialType","nodeCredentialType":"supabaseApi","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"defensaId\": \"{{ $json.defensaId }}\",\n  \"erro\": \"{{ $json.erro }}\",\n  \"dadosExtraidos\": \"{{ $json.dadosExtraidos }}\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[928,112],"id":"30b15513-a7b5-4dc9-941d-c08bbff6d211","name":"HTTP Request","credentials":{"supabaseApi":{"id":"9FeQpCfKieI9F2Ms","name":"bms"}}},{"parameters":{"jsCode":"let defensaId = null;\nlet erro = 'Erro desconhecido no fluxo de defesas';\nlet workflow = 'Workflow não identificado';\nlet nodeName = 'Nó não identificado';\nlet dadosExtraidos = null;\n\ntry {\n  const exec = $json.execution || {};\n\n  workflow = exec.workflow?.name || workflow;\n  nodeName = exec.error?.node?.name || nodeName;\n  erro = exec.error?.message || erro;\n\n  // BUSCA MELHORADA: Procura defensaId em múltiplas fontes\n  const runData = exec.data?.executionData?.resultData?.runData || {};\n  \n  // 1. Procura em nós específicos do fluxo principal\n  const nodeNames = [\n    \"Salvar DefensaId\", // Novo nó que adicionamos\n    \"Pega Defesas_Admin\", // Nó original\n    \"Set Campos\", \n    \"Set Dados\"\n  ];\n  \n  for (const node of nodeNames) {\n    if (runData[node]?.[0]?.data?.main?.[0]?.[0]?.json?.defensaId) {\n      defensaId = runData[node][0].data.main[0][0].json.defensaId;\n      break;\n    }\n  }\n  \n  // 2. Se não encontrou, procura em qualquer nó que tenha defensaId\n  if (!defensaId) {\n    for (const nodeKey in runData) {\n      const nodeData = runData[nodeKey]?.[0]?.data?.main?.[0]?.[0]?.json;\n      if (nodeData && nodeData.defensaId) {\n        defensaId = nodeData.defensaId;\n        break;\n      }\n    }\n  }\n  \n  // 3. Busca recursiva em objetos aninhados\n  if (!defensaId) {\n    function findDefensaIdRecursive(obj) {\n      if (!obj || typeof obj !== 'object') return null;\n      \n      if (obj.defensaId && typeof obj.defensaId === 'string') {\n        return obj.defensaId;\n      }\n      \n      if (obj.id && typeof obj.id === 'string' && obj.id.includes('-')) {\n        return obj.id; // Pega o ID do registro do Supabase\n      }\n      \n      for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          const result = findDefensaIdRecursive(obj[key]);\n          if (result) return result;\n        }\n      }\n      return null;\n    }\n    \n    defensaId = findDefensaIdRecursive(runData);\n  }\n\n} catch (e) {\n  erro = `Falha ao montar payload de erro: ${e.message}`;\n}\n\n// Monta o payload baseado na disponibilidade do defensaId\nlet payload = {};\n\nif (defensaId && typeof defensaId === 'string' && defensaId.trim() !== '') {\n  // Caso 1: Erro com defensaId disponível\n  payload = {\n    defensaId: defensaId,\n    erro: erro,\n    workflow: workflow,\n    node: nodeName,\n    errorType: \"with_defensa_id\"\n  };\n} else {\n  // Caso 2: Erro genérico (sem defensaId)\n  payload = {\n    erro: `Falha crítica no workflow ${workflow}: ${erro}`,\n    errorType: \"generic\",\n    workflow: workflow,\n    node: nodeName\n  };\n}\n\nreturn [{ json: payload }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[512,192],"id":"e461f7cf-50c8-473c-9093-956e22a52e97","name":"Extrair defensaId e erro"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"5fb2d946-27d4-4248-95ab-7918115d0e24","leftValue":"={{ $json.defensaId }}","rightValue":"","operator":{"type":"string","operation":"exists","singleValue":true}},{"id":"27cefd01-4dd6-4650-8729-e884709c86f4","leftValue":"={{ $json.defensaId }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[720,192],"id":"29ed0583-836a-4023-add6-eecb151dc1d6","name":"If"},{"parameters":{"method":"POST","url":"https://xqyxalqwsxqndjetgzry.supabase.co/functions/v1/webhook-n8n-defesas","authentication":"predefinedCredentialType","nodeCredentialType":"supabaseApi","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"erro\": \"{{ $json.erro }}\",\n  \"errorType\": \"generic\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[928,288],"id":"15e2c065-20dd-451e-a4b6-932a06b3f29d","name":"HTTP Request1","credentials":{"supabaseApi":{"id":"9FeQpCfKieI9F2Ms","name":"bms"}}},{"parameters":{},"type":"n8n-nodes-base.errorTrigger","typeVersion":1,"position":[304,192],"id":"4f4c98f2-2d26-4bc1-974a-6e7f709f049d","name":"Error Trigger"}],"connections":{"Extrair defensaId e erro":{"main":[[{"node":"If","type":"main","index":0}]]},"If":{"main":[[{"node":"HTTP Request","type":"main","index":0}],[{"node":"HTTP Request1","type":"main","index":0}]]},"Error Trigger":{"main":[[{"node":"Extrair defensaId e erro","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"6e9309dd-afa6-4e16-a460-ed3e4e1fd7ee","triggerCount":0,"tags":[]}