{"createdAt":"2025-09-26T16:18:00.435Z","updatedAt":"2025-10-06T18:35:03.412Z","id":"7fRajcIaISG9DkWl","name":"Mia - 2.2 - Calendar","active":false,"isArchived":false,"nodes":[{"parameters":{"content":"## Preparacao de valores","height":1680,"width":1536,"color":7},"type":"n8n-nodes-base.stickyNote","position":[-992,48],"typeVersion":1,"id":"d7843678-f189-4f29-864f-a562c8b8cefc","name":"Sticky Note"},{"parameters":{"mode":"raw","jsonOutput":"{\n  \"timezone\": \"America/Sao_Paulo\",\n  \"timeBetweenMeetingsMinutes\": 30,\n  \"schedule\": [\n    {\n      \"day\": \"SEG\",\n      \"available\": true,\n      \"hours\": [\n        { \"after\": \"10:00\", \"before\": \"12:00\" },\n        { \"after\": \"14:00\", \"before\": \"18:00\" }\n      ]\n    },\n    {\n      \"day\": \"TER\",\n      \"available\": true,\n      \"hours\": [\n        { \"after\": \"10:00\", \"before\": \"12:00\" },\n        { \"after\": \"14:00\", \"before\": \"18:00\" }\n      ]\n    },\n    {\n      \"day\": \"QUA\",\n      \"available\": true,\n      \"hours\": [\n        { \"after\": \"10:00\", \"before\": \"12:00\" },\n        { \"after\": \"14:00\", \"before\": \"18:00\" }\n      ]\n    },\n    {\n      \"day\": \"QUI\",\n      \"available\": true,\n      \"hours\": [\n        { \"after\": \"10:00\", \"before\": \"12:00\" },\n        { \"after\": \"14:00\", \"before\": \"18:00\" }\n      ]\n    },\n    {\n      \"day\": \"SEX\",\n      \"available\": true,\n      \"hours\": [\n        { \"after\": \"10:00\", \"before\": \"12:00\" },\n        { \"after\": \"14:00\", \"before\": \"18:00\" }\n      ]\n    },\n    {\n      \"day\": \"SAB\",\n      \"available\": false,\n      \"hours\": []\n    },\n    {\n      \"day\": \"DOM\",\n      \"available\": false,\n      \"hours\": []\n    }\n  ]\n}\n","options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-672,816],"id":"01cafe89-022f-4705-a326-0e4cbba67e6b","name":"Definir Agenda"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('trigger').item.json.type }}","rightValue":"listarHorarios","operator":{"type":"string","operation":"equals"},"id":"2d821077-bb35-4636-ac10-7ad6c459876b"}],"combinator":"and"},"renameOutput":true,"outputKey":"listarHorarios"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2c971151-b71a-4f4e-9e2a-222c8047ce1a","leftValue":"={{ $('trigger').item.json.type }}","rightValue":"agendarReuniao","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"agendarReuniao"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[272,1200],"id":"8baff1e0-8e73-48fd-9f74-90ce74b639b6","name":"Switch1"},{"parameters":{"content":"## Buscar Horarios","height":352,"width":1600,"color":5},"type":"n8n-nodes-base.stickyNote","position":[608,912],"typeVersion":1,"id":"7e544f08-ad67-45ae-9d2c-99654b0f7bf3","name":"Sticky Note4"},{"parameters":{"content":"## Marcar Consulta","height":432,"width":1600,"color":4},"type":"n8n-nodes-base.stickyNote","position":[608,1296],"typeVersion":1,"id":"314257b3-71ea-49d3-8ed6-07d57a01b176","name":"Sticky Note5"},{"parameters":{"calendar":{"__rl":true,"value":"luizakrum@gmail.com","mode":"list","cachedResultName":"luizakrum@gmail.com"},"start":"={{ $json.dados.inicio.dateTime }}","end":"={{ $json.dados.fim.dateTime }}","additionalFields":{"attendees":["={{ $json.dados.email }}"],"description":"=whatsapp  {{ $json.dados.nome }}: {{ $json.dados.telefone }}","summary":"=Reunião Finamob com {{ $json.dados.nome }} - {{ $json.dados.empresa }}"}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[1648,1552],"id":"159fa69f-0579-405a-abf2-f3808877b704","name":"agendar consulta1"},{"parameters":{"jsCode":"// === Pega a agenda (objeto único) ===\nconst agenda = $node[\"Definir Agenda\"].json;\n\n// === Pega todos os eventos (array de items) ===\nconst eventosRaw = $items(\"Listar Eventos\").map(item => item.json);\n\n// Normaliza eventos garantindo timezone coerente\nconst eventos = eventosRaw.map(ev => ({\n  start: new Date(ev.start.dateTime),\n  end: new Date(ev.end.dateTime),\n}));\n\nconst intervaloMin = agenda.timeBetweenMeetingsMinutes;\nconst diasSemana = { DOM: 0, SEG: 1, TER: 2, QUA: 3, QUI: 4, SEX: 5, SAB: 6 };\n\n// TZ e string do dia corrente (YYYY-MM-DD) no fuso da agenda\nconst tz = agenda.timezone || \"America/Sao_Paulo\";\nconst hojeStr = new Date().toLocaleString(\"sv-SE\", { timeZone: tz }).slice(0,10);\n\n// Função auxiliar: próxima data para um dia da semana (pode retornar hoje)\nfunction getProximaData(dia) {\n  const hoje = new Date();\n  let data = new Date(hoje);\n  while (data.getDay() !== diasSemana[dia]) {\n    data.setDate(data.getDate() + 1);\n  }\n  return data;\n}\n\n// === Geração dos slots disponíveis ===\nlet slotsLivres = [];\n\nfor (const dia of agenda.schedule) {\n  if (!dia.available) continue;\n\n  const dataAlvo = getProximaData(dia.day);\n\n  // Garante que hours seja sempre array\n  const faixas = Array.isArray(dia.hours) ? dia.hours : [dia.hours];\n\n  for (const faixa of faixas) {\n    const [hIni, mIni] = faixa.after.split(\":\").map(Number);\n    const [hFim, mFim] = faixa.before.split(\":\").map(Number);\n\n    const inicioDia = new Date(dataAlvo);\n    inicioDia.setHours(hIni, mIni, 0, 0);\n\n    const fimDia = new Date(dataAlvo);\n    fimDia.setHours(hFim, mFim, 0, 0);\n\n    let current = new Date(inicioDia);\n\n    while (current < fimDia) {\n      const next = new Date(current.getTime() + intervaloMin * 60000);\n      if (next > fimDia) break;\n\n      // Exclui qualquer slot do dia corrente (no fuso da agenda)\n      const currentDiaStr = current.toLocaleString(\"sv-SE\", { timeZone: tz }).slice(0,10);\n      if (currentDiaStr === hojeStr) { current = next; continue; }\n\n      // Checa conflito com eventos\n      const ocupado = eventos.some(ev => current < ev.end && next > ev.start);\n\n      if (!ocupado) {\n        slotsLivres.push({\n          day: dia.day,\n          start: current.toLocaleString(\"sv-SE\", { timeZone: tz }).replace(\" \", \"T\") + \":00.000Z\",\n          end:   next.toLocaleString(\"sv-SE\",   { timeZone: tz }).replace(\" \", \"T\") + \":00.000Z\",\n        });\n      }\n\n      current = next;\n    }\n  }\n}\n\nreturn slotsLivres;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[880,1056],"id":"06236b1c-32df-4241-93a5-98c64a4793a1","name":"Slots Disponiveis"},{"parameters":{"operation":"getAll","calendar":{"__rl":true,"value":"luizakrum@gmail.com","mode":"list","cachedResultName":"luizakrum@gmail.com"},"returnAll":true,"timeMax":"={{ $now.plus({ week: 2 }) }}","options":{}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[672,1056],"id":"59b31cdf-e11c-446e-9d5c-70e24550b2a9","name":"Listar Eventos"},{"parameters":{"jsCode":"// === Pega a agenda (objeto único) ===\nconst agenda = $node[\"Definir Agenda\"].json;\n\n// === Pega todos os eventos (array de items) ===\nconst eventosRaw = $items(\"Listar Eventos1\").map(item => item.json);\n\n// Normaliza eventos garantindo timezone coerente\nconst eventos = eventosRaw.map(ev => ({\n  start: new Date(ev.start.dateTime),\n  end: new Date(ev.end.dateTime),\n}));\n\nconst intervaloMin = agenda.timeBetweenMeetingsMinutes;\nconst diasSemana = { DOM: 0, SEG: 1, TER: 2, QUA: 3, QUI: 4, SEX: 5, SAB: 6 };\n\n// TZ e string do dia corrente (YYYY-MM-DD) no fuso da agenda\nconst tz = agenda.timezone || \"America/Sao_Paulo\";\nconst hojeStr = new Date().toLocaleString(\"sv-SE\", { timeZone: tz }).slice(0,10);\n\n// Função auxiliar: próxima data para um dia da semana (pode retornar hoje)\nfunction getProximaData(dia) {\n  const hoje = new Date();\n  let data = new Date(hoje);\n  while (data.getDay() !== diasSemana[dia]) {\n    data.setDate(data.getDate() + 1);\n  }\n  return data;\n}\n\n// === Geração dos slots disponíveis ===\nlet slotsLivres = [];\n\nfor (const dia of agenda.schedule) {\n  if (!dia.available) continue;\n\n  const dataAlvo = getProximaData(dia.day);\n\n  // Garante que hours seja sempre array\n  const faixas = Array.isArray(dia.hours) ? dia.hours : [dia.hours];\n\n  for (const faixa of faixas) {\n    const [hIni, mIni] = faixa.after.split(\":\").map(Number);\n    const [hFim, mFim] = faixa.before.split(\":\").map(Number);\n\n    const inicioDia = new Date(dataAlvo);\n    inicioDia.setHours(hIni, mIni, 0, 0);\n\n    const fimDia = new Date(dataAlvo);\n    fimDia.setHours(hFim, mFim, 0, 0);\n\n    let current = new Date(inicioDia);\n\n    while (current < fimDia) {\n      const next = new Date(current.getTime() + intervaloMin * 60000);\n      if (next > fimDia) break;\n\n      // Exclui qualquer slot do dia corrente (no fuso da agenda)\n      const currentDiaStr = current.toLocaleString(\"sv-SE\", { timeZone: tz }).slice(0,10);\n      if (currentDiaStr === hojeStr) { current = next; continue; }\n\n      // Checa conflito com eventos\n      const ocupado = eventos.some(ev => current < ev.end && next > ev.start);\n\n      if (!ocupado) {\n        slotsLivres.push({\n          day: dia.day,\n          start: current.toLocaleString(\"sv-SE\", { timeZone: tz }).replace(\" \", \"T\") + \":00.000Z\",\n          end:   next.toLocaleString(\"sv-SE\",   { timeZone: tz }).replace(\" \", \"T\") + \":00.000Z\",\n        });\n      }\n\n      current = next;\n    }\n  }\n}\n\nreturn slotsLivres;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[880,1456],"id":"0a8c8d72-79df-4f2b-a650-460f0971ac82","name":"Slots Disponiveis1"},{"parameters":{"operation":"getAll","calendar":{"__rl":true,"value":"luizakrum@gmail.com","mode":"list","cachedResultName":"luizakrum@gmail.com"},"returnAll":true,"timeMax":"={{ $now.plus({ week: 2 }) }}","options":{}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[672,1456],"id":"9ecc034f-3f05-4e9a-bdd3-208a6f8b55b0","name":"Listar Eventos1"},{"parameters":{"jsCode":"// === Pega o 1º item do trigger (se o Code estiver em \"Run Once for All Items\")\nconst input = $items(\"trigger\")[0].json;\n// Se seu Code estiver em \"Run Once for Each Item\", use:\n// const input = $json;\n\nconst { dia, horario, nome, empresa, email, telefone } = input;\n\n// === TZ e \"hoje\" no fuso de SP ===\nconst tz = \"America/Sao_Paulo\";\nconst hojeStr = new Date().toLocaleString(\"sv-SE\", { timeZone: tz }).slice(0, 10); // YYYY-MM-DD\n\n// === Pega a lista de slots disponíveis (array de items) e remove os de hoje ===\n// Os slots já vêm como \"YYYY-MM-DDTHH:MM:SS\" (sem timezone). Use comparação por string.\nconst slots = $items(\"Slots Disponiveis1\")\n  .map(item => item.json)\n  .filter(slot => {\n    const slotDia = String(slot.start).slice(0, 10); // YYYY-MM-DD\n    return slotDia > hojeStr; // exclui o dia corrente\n  });\n\n// Normaliza slot solicitado (yyyy-mm-ddTHH:MM)\nconst solicitadoKey = `${dia}T${horario}`;\n\n// Procura se o slot solicitado está na lista\nconst encontrado = slots.find(slot => {\n  const sKey = String(slot.start).substring(0, 16); // yyyy-mm-ddTHH:MM\n  return sKey === solicitadoKey;\n});\n\n// Garante formato \"YYYY-MM-DDTHH:MM:SS\" (sem timezone)\nfunction toYYYYMMDDTHHMMSS(s) {\n  return String(s).substring(0, 19);\n}\n\nif (encontrado) {\n  return [{\n    json: {\n      status: \"ok\",\n      message: `Horário disponível: ${dia} ${horario}. Pode agendar.`,\n      dados: {\n        nome,\n        empresa,\n        email,\n        telefone,\n        inicio: { dateTime: toYYYYMMDDTHHMMSS(encontrado.start), timeZone: tz },\n        fim:    { dateTime: toYYYYMMDDTHHMMSS(encontrado.end),   timeZone: tz }\n      }\n    }\n  }];\n} else {\n  // Agrupa slots por dia\n  const slotsPorDia = {};\n  for (const slot of slots) {\n    const d = String(slot.start).split(\"T\")[0];\n    (slotsPorDia[d] ||= []).push(slot);\n  }\n  // Ordena slots por horário dentro de cada dia\n  for (const d in slotsPorDia) {\n    slotsPorDia[d].sort((a, b) => new Date(a.start) - new Date(b.start));\n  }\n\n  // Descobre os dias alvo: anterior, mesmo, seguinte\n  const solicitadoDia = dia;\n  const diaAnterior = new Date(`${dia}T00:00:00`);\n  diaAnterior.setDate(diaAnterior.getDate() - 1);\n  const diaSeguinte = new Date(`${dia}T00:00:00`);\n  diaSeguinte.setDate(diaSeguinte.getDate() + 1);\n\n  const prev = diaAnterior.toISOString().split(\"T\")[0];\n  const next = diaSeguinte.toISOString().split(\"T\")[0];\n\n  // Pega no mínimo 2 e no máximo 6 alternativas\n  let alternativas = [\n    ...(slotsPorDia[prev]?.slice(0, 2) || []),\n    ...(slotsPorDia[solicitadoDia]?.slice(0, 2) || []),\n    ...(slotsPorDia[next]?.slice(0, 2) || []),\n  ];\n\n  // Se ainda não tiver 2, expande até 7 dias\n  let offset = 2;\n  while (alternativas.length < 2 && offset <= 7) {\n    const before = new Date(`${dia}T00:00:00`); before.setDate(before.getDate() - offset);\n    const after  = new Date(`${dia}T00:00:00`); after.setDate(after.getDate() + offset);\n    alternativas = [\n      ...alternativas,\n      ...(slotsPorDia[before.toISOString().split(\"T\")[0]]?.slice(0, 2) || []),\n      ...(slotsPorDia[after.toISOString().split(\"T\")[0]]?.slice(0, 2) || []),\n    ];\n    offset++;\n  }\n\n  alternativas = alternativas.slice(0, 6).map(slot => ({\n    inicio: { dateTime: toYYYYMMDDTHHMMSS(slot.start), timeZone: tz },\n    fim:    { dateTime: toYYYYMMDDTHHMMSS(slot.end),   timeZone: tz }\n  }));\n\n  return [{\n    json: {\n      status: \"indisponivel\",\n      message: `O horário ${dia} ${horario} não está disponível.`,\n      alternativas\n    }\n  }];\n}\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1120,1456],"id":"3763f4a9-f3e7-4db1-afcb-0a6fd91ab1cd","name":"Code"},{"parameters":{"inputSource":"jsonExample","jsonExample":"{\n\"type\": \"listarHorarios\",\n\"tema\": \"imersões/club\",\n\"dia\": \"2025-09-10\",\n\"horario\": \"2025-09-10\",\n\"email\": \"usuario@email.com\",\n\"telefone\": \"5511999999999\",\n\"nome\": \"João da Silva\",\n\"empresa\": \"Empresa X\"\n}"},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-912,816],"id":"d9a570e3-34b1-4d7d-9ddd-4266bb1e2ca9","name":"trigger"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"597f2e89-0383-4155-ab3b-1a26a5037fc0","leftValue":"={{ $json.status }}","rightValue":"indisponivel","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1344,1456],"id":"68930763-5806-4f14-a7d6-eaaf09661f5f","name":"If2"},{"parameters":{"assignments":{"assignments":[{"id":"ad1726fe-95a3-42ab-8b6c-836f7b37668e","name":"status","value":"={{ $json.message }}","type":"string"},{"id":"50e62759-8242-4df9-b4f7-b3891e645ff8","name":"alternativas","value":"={{ $json.alternativas }}","type":"array"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1648,1328],"id":"2f5c4af8-22d7-42d5-8c1c-1e817bcc6099","name":"response"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('trigger').item.json.type }}","rightValue":"listarHorarios","operator":{"type":"string","operation":"equals"},"id":"2d821077-bb35-4636-ac10-7ad6c459876b"}],"combinator":"and"},"renameOutput":true,"outputKey":"listarHorarios"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2c971151-b71a-4f4e-9e2a-222c8047ce1a","leftValue":"={{ $('trigger').item.json.type }}","rightValue":"agendarReuniao","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"agendarReuniao"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"c547c9e1-f130-4390-9088-65fd9282edfc","leftValue":"={{ $('trigger').item.json.type }}","rightValue":"encontrarReuniao","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"encontrarReuniao"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"de18d8e3-b6df-4754-940b-2b534d4e4ce1","leftValue":"={{ $('trigger').item.json.type }}","rightValue":"mudarReuniao","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"mudarReuniao"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"4260bfd0-cf2f-4f30-a395-69e4e4bc95be","leftValue":"={{ $('trigger').item.json.type }}","rightValue":"cancelarReuniao","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"cancelarReuniao"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[-480,768],"id":"a14e0170-4e0f-490f-a8ac-fb89f28f7d05","name":"Switch2"},{"parameters":{"content":"## Mudar Evento","height":384,"width":1600,"color":2},"type":"n8n-nodes-base.stickyNote","position":[608,1760],"typeVersion":1,"id":"f3415af7-d22d-4706-8c8d-1a453019ccfb","name":"Sticky Note8"},{"parameters":{"operation":"getAll","calendar":{"__rl":true,"value":"luizakrum@gmail.com","mode":"list","cachedResultName":"luizakrum@gmail.com"},"returnAll":true,"timeMax":"={{ $now.plus({ week: 2 }) }}","options":{}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[672,1904],"id":"a5e2fd25-284d-459f-a481-50d571e16bba","name":"Listar Eventos4"},{"parameters":{"jsCode":"// --- Email vindo do node \"trigger\" (flat) ou do próprio item atual como fallback\nconst emailTrigger = String(\n  $node[\"trigger\"]?.json?.email ?? $json?.email ?? \"\"\n).trim().toLowerCase();\n\nif (!emailTrigger) {\n  return [{ json: { error: \"email ausente no trigger\" } }];\n}\n\n// --- Todos os items que chegam neste Code (devem ser os eventos)\nconst items = await $input.all();\n\n// --- Mantém só eventos onde attendees contém o e-mail do trigger\nconst filtrados = items.filter(it => {\n  const attendees = it.json?.attendees;\n  return Array.isArray(attendees) &&\n    attendees.some(a => String(a.email || \"\").trim().toLowerCase() === emailTrigger);\n});\n\n// --- Saída\nreturn filtrados;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[880,1904],"id":"2f747253-00d6-4b91-83f4-c138a91912d0","name":"Filtrar Eventos"},{"parameters":{"jsCode":"// Entram aqui os eventos já filtrados (cada item = 1 evento)\nconst items = await $input.all();\n\nif (!items.length) {\n  return [{ json: { mensagem: \"Não encontrei eventos para esse e-mail.\", eventos: [] } }];\n}\n\nconst TZ = \"America/Sao_Paulo\";\n\n// helpers\nconst toDate = (d) => d ? new Date(d) : null;\nconst sameYmd = (a, b) => a.toLocaleString(\"sv-SE\", { timeZone: TZ }).slice(0,10) === b.toLocaleString(\"sv-SE\", { timeZone: TZ }).slice(0,10);\n\n// hoje (SP)\nconst agora = new Date();\nconst hojeSP = new Date(new Date().toLocaleString(\"en-US\", { timeZone: TZ }));\n\n// normaliza -> filtra inválidos -> filtra futuros e não-hoje -> ordena\nconst normalizados = items\n  .map((it) => it.json)\n  .map((ev) => {\n    const start = toDate(ev.start?.dateTime || ev.start);\n    const end   = toDate(ev.end?.dateTime   || ev.end);\n    return { ev, start, end, tz: ev.start?.timeZone || TZ };\n  })\n  .filter(x => x.ev?.id && x.start instanceof Date && !isNaN(x.start))\n  .filter(x => x.start > agora && !sameYmd(x.start, hojeSP))\n  .sort((a, b) => a.start - b.start);\n\nif (!normalizados.length) {\n  return [{ json: { mensagem: \"Não há eventos futuros (exceto hoje).\", eventos: [] } }];\n}\n\nfunction fmtLinha(x, i) {\n  const ev = x.ev;\n  const tz = x.tz;\n  const s = x.start;\n  const e = x.end instanceof Date && !isNaN(x.end) ? x.end : null;\n\n  const dia   = s.toLocaleDateString(\"pt-BR\", { timeZone: tz });\n  const hIni  = s.toLocaleTimeString(\"pt-BR\", { timeZone: tz, hour: \"2-digit\", minute: \"2-digit\" });\n  const hFim  = e ? e.toLocaleTimeString(\"pt-BR\", { timeZone: tz, hour: \"2-digit\", minute: \"2-digit\" }) : null;\n\n  return {\n    numero: i + 1,\n    id: ev.id,\n    assunto: ev.summary || \"Sem título\",\n    dia,\n    horaInicio: hIni,\n    horaFim: hFim,\n    timezone: tz,\n    link: ev.htmlLink || ev.hangoutLink || null,\n  };\n}\n\nconst essenciais = normalizados.map(fmtLinha);\n\n// monta mensagem (limita a 10 linhas para não estourar UI)\nconst linhasMsg = essenciais.slice(0, 10).map(e =>\n  `${e.numero} - ${e.assunto}, ${e.dia}, ${e.horaInicio}${e.horaFim ? \"-\" + e.horaFim : \"\"}, id ${e.id}`\n);\n\nconst mensagem =\n  `Temos os seguintes eventos nesse e-mail:\\n\\n` +\n  linhasMsg.join(\"\\n\") +\n  `\\n\\nMe informe o número do evento que você deseja alterar ou cancelar.`;\n\nreturn [{\n  json: {\n    mensagem,\n    eventos: essenciais,\n    numeroParaId: Object.fromEntries(essenciais.map(e => [String(e.numero), e.id]))\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1088,1904],"id":"11eecd9b-fe16-46ac-a6d3-7fdc718dfe40","name":"Response"},{"parameters":{"operation":"update","calendar":{"__rl":true,"mode":"list","value":""},"updateFields":{}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[672,2336],"id":"5e5282ec-11e5-4147-b6c5-97a72eed40ac","name":"Update an event","disabled":true},{"parameters":{"content":"## Reagendar Consulta","height":352,"width":1600,"color":2},"type":"n8n-nodes-base.stickyNote","position":[608,2192],"typeVersion":1,"id":"85aca359-3bdc-445b-ac5b-29398ef9e9fc","name":"Sticky Note7"},{"parameters":{"content":"## Cancelar Consulta","height":352,"width":1600,"color":3},"type":"n8n-nodes-base.stickyNote","position":[608,2576],"typeVersion":1,"id":"49fd5713-0abf-410e-bb3f-735faaa41283","name":"Sticky Note6"},{"parameters":{"assignments":{"assignments":[{"id":"383df707-d58b-4770-a5d8-aa14b37d6d3d","name":"response","value":"Como você sabe, sou a Emi, uma agente de IA 😊. Ainda não me treinaram para reagendar ou cancelar reuniões por aqui. Pode fazer direto no Google Calendar ou falar com o especialista por e-mail — você consegue sugerir as mudanças por lá. Tenho certeza de que logo, logo chega o meu treinamento pra eu fazer isso por você por aqui!  Quer que eu te ajude com mais alguma coisa agora?","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1296,1904],"id":"9e6c90ec-133c-4c80-89a9-4d676451bf2c","name":"response2"},{"parameters":{"resource":"messages-api","instanceName":"social-media-mia","remoteJid":"5511992486507","messageText":"Evento criado","options_message":{}},"type":"n8n-nodes-evolution-api.evolutionApi","typeVersion":1,"position":[1904,704],"id":"6c0189b4-07fc-4f00-bb26-431af6072793","name":"Enviar texto","credentials":{"evolutionApi":{"id":"MuW4REP1kIrolv7W","name":"social-media-mia"}}},{"parameters":{"content":"## Buscar Horarios","height":352,"width":1600,"color":5},"type":"n8n-nodes-base.stickyNote","position":[608,64],"typeVersion":1,"id":"8cd52c08-c91d-4a18-a8ac-3f5e4caae723","name":"Sticky Note9"},{"parameters":{"content":"## Marcar Consulta","height":432,"width":1600,"color":4},"type":"n8n-nodes-base.stickyNote","position":[608,448],"typeVersion":1,"id":"96312a47-638a-417f-acad-1d0252331ad9","name":"Sticky Note10"},{"parameters":{"calendar":{"__rl":true,"value":"lucas@getmia.com.br","mode":"list","cachedResultName":"lucas@getmia.com.br"},"start":"={{ $json.dados.inicio.dateTime }}","end":"={{ $json.dados.fim.dateTime }}","additionalFields":{"attendees":["={{ $json.dados.email }}"],"description":"=whatsapp  {{ $json.dados.nome }}: {{ $json.dados.telefone }}","summary":"=Reunião com {{ $json.dados.nome }} - {{ $json.dados.empresa }}"}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[1648,704],"id":"c532928b-b74c-4338-a364-34a182e591d7","name":"agendar consulta","credentials":{"googleCalendarOAuth2Api":{"id":"iXoqyD421T6fmy1X","name":"Google Calendar account"}}},{"parameters":{"jsCode":"// === Pega a agenda (objeto único) ===\nconst agenda = $node[\"Definir Agenda\"].json;\n\n// === Pega todos os eventos (array de items) ===\nconst eventosRaw = $items(\"Listar Eventos2\").map(item => item.json);\n\n// Normaliza eventos garantindo timezone coerente\nconst eventos = eventosRaw.map(ev => ({\n  start: new Date(ev.start.dateTime),\n  end: new Date(ev.end.dateTime),\n}));\n\nconst intervaloMin = agenda.timeBetweenMeetingsMinutes;\nconst diasSemana = { DOM: 0, SEG: 1, TER: 2, QUA: 3, QUI: 4, SEX: 5, SAB: 6 };\n\n// TZ e string do dia corrente (YYYY-MM-DD) no fuso da agenda\nconst tz = agenda.timezone || \"America/Sao_Paulo\";\nconst hojeStr = new Date().toLocaleString(\"sv-SE\", { timeZone: tz }).slice(0,10);\n\n// Função auxiliar: próxima data para um dia da semana (pode retornar hoje)\nfunction getProximaData(dia) {\n  const hoje = new Date();\n  let data = new Date(hoje);\n  while (data.getDay() !== diasSemana[dia]) {\n    data.setDate(data.getDate() + 1);\n  }\n  return data;\n}\n\n// === Geração dos slots disponíveis ===\nlet slotsLivres = [];\n\nfor (const dia of agenda.schedule) {\n  if (!dia.available) continue;\n\n  const dataAlvo = getProximaData(dia.day);\n\n  // Garante que hours seja sempre array\n  const faixas = Array.isArray(dia.hours) ? dia.hours : [dia.hours];\n\n  for (const faixa of faixas) {\n    const [hIni, mIni] = faixa.after.split(\":\").map(Number);\n    const [hFim, mFim] = faixa.before.split(\":\").map(Number);\n\n    const inicioDia = new Date(dataAlvo);\n    inicioDia.setHours(hIni, mIni, 0, 0);\n\n    const fimDia = new Date(dataAlvo);\n    fimDia.setHours(hFim, mFim, 0, 0);\n\n    let current = new Date(inicioDia);\n\n    while (current < fimDia) {\n      const next = new Date(current.getTime() + intervaloMin * 60000);\n      if (next > fimDia) break;\n\n      // Exclui qualquer slot do dia corrente (no fuso da agenda)\n      const currentDiaStr = current.toLocaleString(\"sv-SE\", { timeZone: tz }).slice(0,10);\n      if (currentDiaStr === hojeStr) { current = next; continue; }\n\n      // Checa conflito com eventos\n      const ocupado = eventos.some(ev => current < ev.end && next > ev.start);\n\n      if (!ocupado) {\n        slotsLivres.push({\n          day: dia.day,\n          start: current.toLocaleString(\"sv-SE\", { timeZone: tz }).replace(\" \", \"T\") + \":00.000Z\",\n          end:   next.toLocaleString(\"sv-SE\",   { timeZone: tz }).replace(\" \", \"T\") + \":00.000Z\",\n        });\n      }\n\n      current = next;\n    }\n  }\n}\n\nreturn slotsLivres;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[880,208],"id":"5006961a-6d5f-4f07-845c-77c98c9e46cb","name":"Slots Disponiveis2"},{"parameters":{"operation":"getAll","calendar":{"__rl":true,"value":"lucas@getmia.com.br","mode":"list","cachedResultName":"lucas@getmia.com.br"},"returnAll":true,"timeMax":"={{ $now.plus({ week: 2 }) }}","options":{}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[672,208],"id":"ab2725ef-db5f-40ee-a1e7-05eea1803b7a","name":"Listar Eventos2","credentials":{"googleCalendarOAuth2Api":{"id":"iXoqyD421T6fmy1X","name":"Google Calendar account"}}},{"parameters":{"jsCode":"// === Pega a agenda (objeto único) ===\nconst agenda = $node[\"Definir Agenda\"].json;\n\n// === Pega todos os eventos (array de items) ===\nconst eventosRaw = $items(\"Listar Eventos3\").map(item => item.json);\n\n// Normaliza eventos garantindo timezone coerente\nconst eventos = eventosRaw.map(ev => ({\n  start: new Date(ev.start.dateTime),\n  end: new Date(ev.end.dateTime),\n}));\n\nconst intervaloMin = agenda.timeBetweenMeetingsMinutes;\nconst diasSemana = { DOM: 0, SEG: 1, TER: 2, QUA: 3, QUI: 4, SEX: 5, SAB: 6 };\n\n// TZ e string do dia corrente (YYYY-MM-DD) no fuso da agenda\nconst tz = agenda.timezone || \"America/Sao_Paulo\";\nconst hojeStr = new Date().toLocaleString(\"sv-SE\", { timeZone: tz }).slice(0,10);\n\n// Função auxiliar: próxima data para um dia da semana (pode retornar hoje)\nfunction getProximaData(dia) {\n  const hoje = new Date();\n  let data = new Date(hoje);\n  while (data.getDay() !== diasSemana[dia]) {\n    data.setDate(data.getDate() + 1);\n  }\n  return data;\n}\n\n// === Geração dos slots disponíveis ===\nlet slotsLivres = [];\n\nfor (const dia of agenda.schedule) {\n  if (!dia.available) continue;\n\n  const dataAlvo = getProximaData(dia.day);\n\n  // Garante que hours seja sempre array\n  const faixas = Array.isArray(dia.hours) ? dia.hours : [dia.hours];\n\n  for (const faixa of faixas) {\n    const [hIni, mIni] = faixa.after.split(\":\").map(Number);\n    const [hFim, mFim] = faixa.before.split(\":\").map(Number);\n\n    const inicioDia = new Date(dataAlvo);\n    inicioDia.setHours(hIni, mIni, 0, 0);\n\n    const fimDia = new Date(dataAlvo);\n    fimDia.setHours(hFim, mFim, 0, 0);\n\n    let current = new Date(inicioDia);\n\n    while (current < fimDia) {\n      const next = new Date(current.getTime() + intervaloMin * 60000);\n      if (next > fimDia) break;\n\n      // Exclui qualquer slot do dia corrente (no fuso da agenda)\n      const currentDiaStr = current.toLocaleString(\"sv-SE\", { timeZone: tz }).slice(0,10);\n      if (currentDiaStr === hojeStr) { current = next; continue; }\n\n      // Checa conflito com eventos\n      const ocupado = eventos.some(ev => current < ev.end && next > ev.start);\n\n      if (!ocupado) {\n        slotsLivres.push({\n          day: dia.day,\n          start: current.toLocaleString(\"sv-SE\", { timeZone: tz }).replace(\" \", \"T\") + \":00.000Z\",\n          end:   next.toLocaleString(\"sv-SE\",   { timeZone: tz }).replace(\" \", \"T\") + \":00.000Z\",\n        });\n      }\n\n      current = next;\n    }\n  }\n}\n\nreturn slotsLivres;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[880,608],"id":"10d7d712-2e0a-42ab-84e7-c4fe99e3635c","name":"Slots Disponiveis3"},{"parameters":{"operation":"getAll","calendar":{"__rl":true,"value":"lucas@getmia.com.br","mode":"list","cachedResultName":"lucas@getmia.com.br"},"returnAll":true,"timeMax":"={{ $now.plus({ week: 2 }) }}","options":{}},"type":"n8n-nodes-base.googleCalendar","typeVersion":1.3,"position":[672,608],"id":"3eed877c-441d-4caa-85aa-41c5d1758011","name":"Listar Eventos3","credentials":{"googleCalendarOAuth2Api":{"id":"iXoqyD421T6fmy1X","name":"Google Calendar account"}}},{"parameters":{"jsCode":"// === Pega o 1º item do trigger (se o Code estiver em \"Run Once for All Items\")\nconst input = $items(\"trigger\")[0].json;\n// Se seu Code estiver em \"Run Once for Each Item\", use:\n// const input = $json;\n\nconst { dia, horario, nome, empresa, email, telefone } = input;\n\n// === TZ e \"hoje\" no fuso de SP ===\nconst tz = \"America/Sao_Paulo\";\nconst hojeStr = new Date().toLocaleString(\"sv-SE\", { timeZone: tz }).slice(0, 10); // YYYY-MM-DD\n\n// === Pega a lista de slots disponíveis (array de items) e remove os de hoje ===\n// Os slots já vêm como \"YYYY-MM-DDTHH:MM:SS\" (sem timezone). Use comparação por string.\nconst slots = $items(\"Slots Disponiveis3\")\n  .map(item => item.json)\n  .filter(slot => {\n    const slotDia = String(slot.start).slice(0, 10); // YYYY-MM-DD\n    return slotDia > hojeStr; // exclui o dia corrente\n  });\n\n// Normaliza slot solicitado (yyyy-mm-ddTHH:MM)\nconst solicitadoKey = `${dia}T${horario}`;\n\n// Procura se o slot solicitado está na lista\nconst encontrado = slots.find(slot => {\n  const sKey = String(slot.start).substring(0, 16); // yyyy-mm-ddTHH:MM\n  return sKey === solicitadoKey;\n});\n\n// Garante formato \"YYYY-MM-DDTHH:MM:SS\" (sem timezone)\nfunction toYYYYMMDDTHHMMSS(s) {\n  return String(s).substring(0, 19);\n}\n\nif (encontrado) {\n  return [{\n    json: {\n      status: \"ok\",\n      message: `Horário disponível: ${dia} ${horario}. Pode agendar.`,\n      dados: {\n        nome,\n        empresa,\n        email,\n        telefone,\n        inicio: { dateTime: toYYYYMMDDTHHMMSS(encontrado.start), timeZone: tz },\n        fim:    { dateTime: toYYYYMMDDTHHMMSS(encontrado.end),   timeZone: tz }\n      }\n    }\n  }];\n} else {\n  // Agrupa slots por dia\n  const slotsPorDia = {};\n  for (const slot of slots) {\n    const d = String(slot.start).split(\"T\")[0];\n    (slotsPorDia[d] ||= []).push(slot);\n  }\n  // Ordena slots por horário dentro de cada dia\n  for (const d in slotsPorDia) {\n    slotsPorDia[d].sort((a, b) => new Date(a.start) - new Date(b.start));\n  }\n\n  // Descobre os dias alvo: anterior, mesmo, seguinte\n  const solicitadoDia = dia;\n  const diaAnterior = new Date(`${dia}T00:00:00`);\n  diaAnterior.setDate(diaAnterior.getDate() - 1);\n  const diaSeguinte = new Date(`${dia}T00:00:00`);\n  diaSeguinte.setDate(diaSeguinte.getDate() + 1);\n\n  const prev = diaAnterior.toISOString().split(\"T\")[0];\n  const next = diaSeguinte.toISOString().split(\"T\")[0];\n\n  // Pega no mínimo 2 e no máximo 6 alternativas\n  let alternativas = [\n    ...(slotsPorDia[prev]?.slice(0, 2) || []),\n    ...(slotsPorDia[solicitadoDia]?.slice(0, 2) || []),\n    ...(slotsPorDia[next]?.slice(0, 2) || []),\n  ];\n\n  // Se ainda não tiver 2, expande até 7 dias\n  let offset = 2;\n  while (alternativas.length < 2 && offset <= 7) {\n    const before = new Date(`${dia}T00:00:00`); before.setDate(before.getDate() - offset);\n    const after  = new Date(`${dia}T00:00:00`); after.setDate(after.getDate() + offset);\n    alternativas = [\n      ...alternativas,\n      ...(slotsPorDia[before.toISOString().split(\"T\")[0]]?.slice(0, 2) || []),\n      ...(slotsPorDia[after.toISOString().split(\"T\")[0]]?.slice(0, 2) || []),\n    ];\n    offset++;\n  }\n\n  alternativas = alternativas.slice(0, 6).map(slot => ({\n    inicio: { dateTime: toYYYYMMDDTHHMMSS(slot.start), timeZone: tz },\n    fim:    { dateTime: toYYYYMMDDTHHMMSS(slot.end),   timeZone: tz }\n  }));\n\n  return [{\n    json: {\n      status: \"indisponivel\",\n      message: `O horário ${dia} ${horario} não está disponível.`,\n      alternativas\n    }\n  }];\n}\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1120,608],"id":"9579f8e2-a06b-485e-b6bd-740a3e897c70","name":"Code1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"597f2e89-0383-4155-ab3b-1a26a5037fc0","leftValue":"={{ $json.status }}","rightValue":"indisponivel","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1344,608],"id":"56e6f371-6891-47fc-aa5a-869776512026","name":"If"},{"parameters":{"assignments":{"assignments":[{"id":"ad1726fe-95a3-42ab-8b6c-836f7b37668e","name":"status","value":"={{ $json.message }}","type":"string"},{"id":"50e62759-8242-4df9-b4f7-b3891e645ff8","name":"alternativas","value":"={{ $json.alternativas }}","type":"array"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1648,480],"id":"549d9f2b-492d-4ebd-b779-3c713217a7ca","name":"response1"}],"connections":{"Definir Agenda":{"main":[[{"node":"Switch2","type":"main","index":0}]]},"agendar consulta1":{"main":[[]]},"Switch1":{"main":[[{"node":"Listar Eventos","type":"main","index":0}],[{"node":"Listar Eventos1","type":"main","index":0}]]},"Listar Eventos":{"main":[[{"node":"Slots Disponiveis","type":"main","index":0}]]},"Listar Eventos1":{"main":[[{"node":"Slots Disponiveis1","type":"main","index":0}]]},"Slots Disponiveis1":{"main":[[{"node":"Code","type":"main","index":0}]]},"trigger":{"main":[[{"node":"Definir Agenda","type":"main","index":0}]]},"Code":{"main":[[{"node":"If2","type":"main","index":0}]]},"If2":{"main":[[{"node":"response","type":"main","index":0}],[{"node":"agendar consulta1","type":"main","index":0}]]},"Switch2":{"main":[[{"node":"Listar Eventos2","type":"main","index":0}],[{"node":"Listar Eventos3","type":"main","index":0}],[{"node":"Listar Eventos4","type":"main","index":0}],[],[]]},"Listar Eventos4":{"main":[[{"node":"Filtrar Eventos","type":"main","index":0}]]},"Filtrar Eventos":{"main":[[{"node":"Response","type":"main","index":0}]]},"Response":{"main":[[{"node":"response2","type":"main","index":0}]]},"Listar Eventos2":{"main":[[{"node":"Slots Disponiveis2","type":"main","index":0}]]},"Slots Disponiveis3":{"main":[[{"node":"Code1","type":"main","index":0}]]},"Listar Eventos3":{"main":[[{"node":"Slots Disponiveis3","type":"main","index":0}]]},"Code1":{"main":[[{"node":"If","type":"main","index":0}]]},"If":{"main":[[{"node":"response1","type":"main","index":0}],[{"node":"agendar consulta","type":"main","index":0}]]},"agendar consulta":{"main":[[{"node":"Enviar texto","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","callerPolicy":"workflowsFromSameOwner","errorWorkflow":"Cem9y3zmcggUQhrp"},"staticData":{"node:Stripe Trigger":{"webhookId":"we_1S45HZRuKlw6o0Hg4nRNx3O2","webhookEvents":["customer.subscription.created"],"webhookSecret":"whsec_u9SDEbFzkZY1tJcmw28bdoOkPw1RIb4p"}},"meta":{"templateCredsSetupCompleted":true},"pinData":{"trigger":[{"json":{"type":"agendarReuniao","tema":"imersões/club","dia":"2025-09-10","horario":"17:00","email":"lucas95_souza@hotmail.com","telefone":"11992486507","nome":"Lucas Andrade","empresa":"MDS"}}]},"versionId":"13b0a217-7e98-4038-b78b-b1397a561d89","triggerCount":1,"tags":[]}