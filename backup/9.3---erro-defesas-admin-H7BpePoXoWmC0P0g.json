{"createdAt":"2025-10-20T18:52:21.046Z","updatedAt":"2025-10-22T16:35:28.214Z","id":"H7BpePoXoWmC0P0g","name":"9.3 - Erro Defesas Admin","active":false,"isArchived":true,"nodes":[{"parameters":{},"type":"n8n-nodes-base.errorTrigger","typeVersion":1,"position":[0,0],"id":"46d55f04-c67e-47a1-abbc-1fd348044acc","name":"Error Trigger"},{"parameters":{"jsCode":"let defensaId = null;\nlet erro = 'Erro desconhecido no fluxo de defesas';\nlet workflow = 'Workflow não identificado';\nlet nodeName = 'Nó não identificado';\nlet dadosExtraidos = null;\n\ntry {\n  const exec = $json.execution || {};\n\n  workflow = exec.workflow?.name || workflow;\n  nodeName = exec.error?.node?.name || nodeName;\n  erro = exec.error?.message || erro;\n\n  // BUSCA MELHORADA: Procura defensaId em múltiplas fontes\n  const runData = exec.data?.executionData?.resultData?.runData || {};\n  \n  // 1. Procura em nós específicos do fluxo principal\n  const nodeNames = [\n    \"Salvar DefensaId\", // Novo nó que adicionamos\n    \"Pega Defesas_Admin\", // Nó original\n    \"Set Campos\", \n    \"Set Dados\"\n  ];\n  \n  for (const node of nodeNames) {\n    if (runData[node]?.[0]?.data?.main?.[0]?.[0]?.json?.defensaId) {\n      defensaId = runData[node][0].data.main[0][0].json.defensaId;\n      break;\n    }\n  }\n  \n  // 2. Se não encontrou, procura em qualquer nó que tenha defensaId\n  if (!defensaId) {\n    for (const nodeKey in runData) {\n      const nodeData = runData[nodeKey]?.[0]?.data?.main?.[0]?.[0]?.json;\n      if (nodeData && nodeData.defensaId) {\n        defensaId = nodeData.defensaId;\n        break;\n      }\n    }\n  }\n  \n  // 3. Busca recursiva em objetos aninhados\n  if (!defensaId) {\n    function findDefensaIdRecursive(obj) {\n      if (!obj || typeof obj !== 'object') return null;\n      \n      if (obj.defensaId && typeof obj.defensaId === 'string') {\n        return obj.defensaId;\n      }\n      \n      if (obj.id && typeof obj.id === 'string' && obj.id.includes('-')) {\n        return obj.id; // Pega o ID do registro do Supabase\n      }\n      \n      for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          const result = findDefensaIdRecursive(obj[key]);\n          if (result) return result;\n        }\n      }\n      return null;\n    }\n    \n    defensaId = findDefensaIdRecursive(runData);\n  }\n\n} catch (e) {\n  erro = `Falha ao montar payload de erro: ${e.message}`;\n}\n\n// Monta o payload baseado na disponibilidade do defensaId\nlet payload = {};\n\nif (defensaId && typeof defensaId === 'string' && defensaId.trim() !== '') {\n  // Caso 1: Erro com defensaId disponível\n  payload = {\n    defensaId: defensaId,\n    erro: erro,\n    workflow: workflow,\n    node: nodeName,\n    errorType: \"with_defensa_id\"\n  };\n} else {\n  // Caso 2: Erro genérico (sem defensaId)\n  payload = {\n    erro: `Falha crítica no workflow ${workflow}: ${erro}`,\n    errorType: \"generic\",\n    workflow: workflow,\n    node: nodeName\n  };\n}\n\nreturn [{ json: payload }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[208,0],"id":"59192a56-6565-46f0-94ce-c4d73b842bc1","name":"Code"},{"parameters":{"method":"POST","url":"https://xqyxalqwsxqndjetgzry.supabase.co/functions/v1/webhook-n8n-defesas","authentication":"predefinedCredentialType","nodeCredentialType":"supabaseApi","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"defensaId\": \"{{ $json.defensaId }}\",\n  \"erro\": \"{{ $json.erro }}\",\n  \"dadosExtraidos\": \"{{ $json.dadosExtraidos }}\"\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[400,0],"id":"2f0e0081-6b6c-4560-aa3d-d4b0f8ec5c38","name":"HTTP Request","credentials":{"supabaseApi":{"id":"9FeQpCfKieI9F2Ms","name":"bms"}}}],"connections":{"Error Trigger":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"bd45449e-cb16-42a5-a357-e2504cdb20d3","triggerCount":0,"tags":[]}